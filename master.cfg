# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *


def setup_auto_scaler(cfg):
    # CHANGE SOURCES

    # the 'change_source' setting tells the buildmaster how it should find out
    # about source code changes.  Here we point to the buildbot clone of pyflakes.

    cfg['change_source'] = []
    cfg['change_source'].append(
        changes.GitPoller('git://github.com/fritogotlayed/corp-hq-auto-scale.git',
                          workdir='gitpoller-workdir',
                          branch='master',
                          pollinterval=300))

    # SCHEDULERS

    # Configure the Schedulers, which decide how to react to incoming changes.  In this
    # case, just kick off a 'runtests' build

    cfg['schedulers'] = []
    cfg['schedulers'].append(
        schedulers.SingleBranchScheduler(
            name="all",
            change_filter=util.ChangeFilter(branch='master'),
            treeStableTimer=None,
            builderNames=["corp-hq-auto-scale-full"]))
    cfg['schedulers'].append(
        schedulers.ForceScheduler(
            name="force",
            builderNames=["corp-hq-auto-scale-full"]))

    # BUILDERS

    # The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
    # what steps, and which workers can execute them.  Note that any particular build will
    # only take place on one worker.

    factory = util.BuildFactory()

    # check out the source
    factory.addSteps([
        steps.Git(
            name='Get Source',
            repourl='http://github.com/fritogotlayed/corp-hq-auto-scale.git',
            mode='incremental'),
        steps.ShellCommand(
            name='Run Tox',
            command=["tox", "-r"]),
        steps.ShellCommand(
            name='Build docker image',
            command=["make", "docker-build"]),
        steps.ShellCommand(
            name='Tag docker image for docker hub',
            command=["docker", "tag", "corp-hq-auto-scale:latest", "fritogotlayed/corp-hq-auto-scale:latest"]),
        steps.ShellCommand(
            name='Log in to docker hub',
            hideStepIf=True,
            command=["docker", "login", "-u", "fritogotlayed", "-p", util.Secret("DOCKER_FRITO_PASS")]),
        steps.ShellCommand(
            name='Push image to docker hub',
            command=["docker", "push", "fritogotlayed/corp-hq-auto-scale:latest"]),
        steps.ShellCommand(
            name='Log out of docker hub.',
            command=["docker", "logout"]),
    ])

    cfg['builders'] = []
    cfg['builders'].append(
        util.BuilderConfig(
            name="corp-hq-auto-scale-full",
            workernames=["example-worker"],
            factory=factory))

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['secretsProviders'] = [secrets.SecretInAFile(dirname="/var/secrets")]
c['workers'] = [
    worker.Worker("example-worker", 'pass')
]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

setup_auto_scaler(c)

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

c['status'] = []


def slack_message_builder(build):
    message = 'The build for %s is in state %s.' % (
        build['builder']['name'], build['state_string'])

    return {
        'text': message,
        'username': 'BuildBot',
        'icon_emoji': ':robot_face:',
        'channel': '#project-corp-hq-alerte'
    }

c['services'] = [
    reporters.HttpStatusPush(
        serverUrl='https://hooks.slack.com/services/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',
        format_fn=slack_message_builder,
    )
]
# message = (
#     "The build for corp-hq-auto-scale has completed with the status: {0}"
#     "").format(builder.BuildStatus.getResults())
# factory.addStep(steps.POST(util.Secret('SLACK_NOTIFICATION_URI'), data={
#     "text": message,
#     "username": "BuildBot",
#     "icon_emoji": ":robot_face:",
#     "channel": "#project-corp-hq-alert"
# }))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Corp HQ BuildBot"
c['titleURL'] = "http://github.com/fritogotlayed/buildbot"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(
    port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
    plugins=dict(waterfall_view={}, console_view={})
)

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
